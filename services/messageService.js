const fetchFundingRate = require("../api/fetchFundingRate");
const fetchOpenInterest = require("../api/fetchOpenInterest");
const fetchLiquidationHistory = require("../api/fetchLiquidationHistory");
const fetchLongShortRatio = require("../api/fetchLongShortRatio");
const fetchOhlcvHistory = require("../api/fetchOhlcvHistory");


async function sendFullMarketDataMessage(ctx, symbol, time) {
  let from, to;

  // Ki·ªÉm tra n·∫øu ng∆∞·ªùi d√πng nh·∫≠p th·ªùi gian (time)
  if (time !== null) {
    // N·∫øu c√≥ th·ªùi gian (v√≠ d·ª•: 7h)
    const inputHour = time;

    // L·∫•y ng√†y th√°ng nƒÉm hi·ªán t·∫°i ƒë·ªÉ l√†m cƒÉn c·ª©
    const now = new Date();
    let year = now.getFullYear();  // L·∫•y nƒÉm hi·ªán t·∫°i
    let month = now.getMonth();    // L·∫•y th√°ng hi·ªán t·∫°i (t√≠nh t·ª´ 0)
    let day = now.getDate();       // L·∫•y ng√†y hi·ªán t·∫°i

    // T·∫°o ƒë·ªëi t∆∞·ª£ng Date cho th·ªùi gian theo gi·ªù nh·∫≠p v√†o (7h s√°ng)
    const specificTime = new Date(year, month, day, inputHour, 0, 0, 0); // S·ª≠ d·ª•ng gi·ªù nh·∫≠p v√†o

    // Chuy·ªÉn ƒë·ªïi th·ªùi gian sang Unix timestamp
    to = Math.floor(specificTime.getTime() / 1000);  // Chuy·ªÉn ƒë·ªïi sang Unix timestamp
    from = to;  // V√¨ kh√¥ng c√≥ kho·∫£ng th·ªùi gian, `from` v√† `to` gi·ªëng nhau (1 gi·ªù c·ª• th·ªÉ)
  } else {
    // N·∫øu kh√¥ng c√≥ th·ªùi gian, l·∫•y gi·ªù hi·ªán t·∫°i l√†m ƒë·∫ßu gi·ªù (l√†m tr√≤n v·ªÅ ƒë·∫ßu gi·ªù)
    const now = new Date();
    now.setMinutes(0);  // L√†m tr√≤n ph√∫t v·ªÅ 0
    now.setSeconds(0);  // L√†m tr√≤n gi√¢y v·ªÅ 0
    now.setMilliseconds(0);  // L√†m tr√≤n mili gi√¢y v·ªÅ 0

    // Chuy·ªÉn ƒë·ªïi th·ªùi gian l√†m tr√≤n sang Unix timestamp
    from = Math.floor(now.getTime() / 1000);  // Chuy·ªÉn ƒë·ªïi sang Unix timestamp
    to = from;  // V√¨ kh√¥ng c√≥ th·ªùi gian c·ª• th·ªÉ, `from` v√† `to` gi·ªëng nhau
  }

  // In ra log ƒë·ªÉ ki·ªÉm tra gi√° tr·ªã timestamp c·ªßa 'from' v√† 'to'
  console.log("From (timestamp):", from);
  console.log("To (timestamp):", to);

  // C√°c h√†m l·∫•y d·ªØ li·ªáu th·ªã tr∆∞·ªùng kh√°c nh∆∞ Funding Rate, Open Interest, v.v.
  const fundingResult = await fetchFundingRate(symbol, from, to);
  const oiResult = await fetchOpenInterest(symbol, from, to);
  const liquidationResult = await fetchLiquidationHistory(symbol, from, to);
  const longShortResult = await fetchLongShortRatio(symbol, from, to);
  const ohlcvResult = await fetchOhlcvHistory(symbol, from, to);

  // X√¢y d·ª±ng tin nh·∫Øn tr·∫£ v·ªÅ cho ng∆∞·ªùi d√πng
  let message = ""; // ‚úÖ Th√™m d√≤ng n√†y

  // X·ª≠ l√Ω d·ªØ li·ªáu OHLCV (Open, High, Low, Close, Volume)
  if (ohlcvResult.success) {
    const open = ohlcvResult.open;
    const close = ohlcvResult.close;
    const volume = ohlcvResult.volume;
    const buyVolume = ohlcvResult.baseVolume;
    const sellVolume = volume - buyVolume;
  
    const percentChange = ((close - open) / open) * 100;
    const buyMorePercent = ((buyVolume - sellVolume) / sellVolume) * 100;
    const trend = buyMorePercent > 0 ? "‚¨ÜÔ∏è" : "‚¨áÔ∏è";
  
    const buyTx = ohlcvResult.buyTx;
    const sellTx = ohlcvResult.totalTx - buyTx;
    const buyMorePercentTx = ((buyTx - sellTx) / sellTx) * 100;
    const trendTx = buyMorePercentTx > 0 ? "‚¨ÜÔ∏è" : "‚¨áÔ∏è";
  
    const displaySymbol = symbol.toUpperCase();
  
    message += `‚≠ê‚≠ê‚≠ê <code><b><i>${displaySymbol}</i></b></code> ‚≠ê‚≠ê‚≠ê\n`;
    message += `üî∏ <b>Price:</b> ${close}\n`;
    message += `üöÄ <b>PriceChange:</b> ${percentChange.toFixed(1)}%\n`;
    message += `‚ï∞‚îà‚û§<a href="https://www.coinglass.com/tv/vi/Binance_${displaySymbol}"> Coinglass </a>\n`;
    message += `  ‚Ü≥ <b>Volume:</b> ${volume.toLocaleString()} || ${trend} ${buyMorePercent.toFixed(1)}%\n`;
    message += `  ‚Ü≥ <b>Buy:</b> ${buyVolume.toLocaleString()} || üìâ <b>Sell:</b> ${sellVolume.toLocaleString()}\n`;
    message += `  ‚Ü≥ <b>TxBuy:</b> ${trendTx} ${buyMorePercentTx.toFixed(1)}%\n\n`;
  }



  // X·ª≠ l√Ω d·ªØ li·ªáu Funding Rate
  if (fundingResult.success) {
    message += `‚â´ <b>Funding Rate</b>: <i>${fundingResult.close}</i>\n\n`;
  }

 // X·ª≠ l√Ω Open Interest
if (oiResult.success) {
  const openInterestOpen = oiResult.history[0].open;  // Gi√° tr·ªã Open Interest t·∫°i th·ªùi ƒëi·ªÉm "Open"
  const openInterestClose = oiResult.history[0].close;  // Gi√° tr·ªã Open Interest t·∫°i th·ªùi ƒëi·ªÉm "Close"

  // T√≠nh ph·∫ßn trƒÉm thay ƒë·ªïi gi·ªØa gi√° tr·ªã Open v√† Close
  const oiChangePercent = ((openInterestClose - openInterestOpen) / openInterestOpen) * 100;
  const oiChange = oiChangePercent >= 0 ? `‚è´ +${oiChangePercent.toFixed(2)}%` : `‚è¨ ${oiChangePercent.toFixed(2)}%`;

  message += `·Øì‚òÖ Open Interest: <i>${oiChange}</i>\n`;
  message += `   ‚Ü≥ Open: <i>${Math.round(openInterestOpen).toLocaleString('vi-VN')}</i>\n`;
  message += `   ‚Ü≥ Close: <i>${Math.round(openInterestClose).toLocaleString('vi-VN')}</i>\n\n`;
}

// X·ª≠ l√Ω d·ªØ li·ªáu Long-Short Ratio
if (longShortResult.success) {
  const current = longShortResult.history[0];

  message += `‚û§ <b>Long-Short Ratio</b>: <i>${current.ratio.toFixed(2)}</i>\n`;
  message += `   ‚Ü≥ Long: <i>${current.long.toFixed(1)}%</i>\n`;
  message += `   ‚Ü≥ Short: <i>${current.short.toFixed(1)}%</i>\n\n`;

}
  // X·ª≠ l√Ω d·ªØ li·ªáu Liquidation
  if (liquidationResult.success) {
    const current = liquidationResult.history[0];
  
    // T√≠nh th·ªùi gian VN t·ª´ timestamp
    const dateVN = new Date(current.timestamp * 1000);  // KH√îNG +7*3600

const hh = String(dateVN.getHours()).padStart(2, '0');
const mm = String(dateVN.getMinutes()).padStart(2, '0');
const ss = String(dateVN.getSeconds()).padStart(2, '0');
const day = dateVN.getDate();
const month = dateVN.getMonth() + 1;
const year = dateVN.getFullYear();

const formattedTime = `üïí C·∫≠p nh·∫≠t: ${hh}:${mm}:${ss} ${day}/${month}/${year}`;

  
    message += `‚úî <b>Liquidation</b>:\n`;
    message += `   ‚Ü≥ Long: <i>${Math.round(current.long).toLocaleString('vi-VN')}</i> || Short: <i>${Math.round(current.short).toLocaleString('vi-VN')}</i>\n`;
    message += `${formattedTime}\n`;

  } else {
    message += `${liquidationResult.error}\n\n`;
  }
  

  // G·ª≠i tin nh·∫Øn cho ng∆∞·ªùi d√πng
  ctx.reply(message, { parse_mode: 'HTML' });
}

module.exports = { sendFullMarketDataMessage };
